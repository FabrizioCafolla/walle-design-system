---
import type { Project } from "@utils/interfaces";
import { Button, Badge } from "@components";
import { getPlatformIcon, calculateTimeAgo } from "@utils";

interface Props extends Project {}

const data = Astro.props;

const platformIcon = getPlatformIcon(data.source.platform);

const timeAgo = data.metadata?.created_at ? calculateTimeAgo(data.metadata.created_at) : null;
---

<article
  class="project-detail-card"
  tabindex="0"
  aria-labelledby={`project-title-${data.name.replace(/\s+/g, "-")}`}
>
  <header class="project-detail-card__header">
    <div class="project-detail-card__name">
      <h2 class="project-detail-card__title" id={`project-title-${data.name.replace(/\s+/g, "-")}`}>
        {data.name}
      </h2>
    </div>

    <div class="project-detail-card__meta-group">
      <div class="project-detail-card__meta">
        <div class="meta-item">
          <span class="meta-label">Language</span>
          <Badge text={data.source.language} iconName="fa:code" color="alternative" size="medium" />
        </div>
        <div class="meta-item">
          <span class="meta-label">License</span>
          <Badge
            text={data.source.license}
            iconName="fa:balance-scale"
            color="alternative"
            size="medium"
          />
        </div>

        <div class="meta-item">
          <span class="meta-label">Platform</span>
          <Badge
            text={data.source.platform}
            iconName={platformIcon}
            color="alternative"
            size="medium"
          />
        </div>

        {
          timeAgo && (
            <div class="meta-item">
              <span class="meta-label">Added</span>
              <Badge text={timeAgo} iconName="fa:calendar" color="alternative" size="medium" />
            </div>
          )
        }
      </div>
    </div>
  </header>

  <div class="project-detail-card__body">
    <div class="project-detail-card__description">
      <h5 class="description-title">About this project</h5>
      <p>{data.description}</p>
    </div>

    {
      data.tags && data.tags.length > 0 && (
        <div class="project-detail-card__tags" aria-label="Project tags">
          <h5 class="tags-title">Tags</h5>
          <div class="tags-container">
            {data.tags.map((tag) => (
              <Badge
                text={tag}
                iconName="fa:hashtag"
                color="secondary"
                size="small"
                iconPosition="start"
              />
            ))}
          </div>
        </div>
      )
    }
  </div>

  <footer class="project-detail-card__footer">
    <div class="project-detail-card__actions">
      <Button
        link={data.source.url_repository}
        target="_blank"
        text="View Repository"
        iconName={platformIcon}
        outline={true}
        size="medium"
        fullWidth={true}
      />
      {
        data.source.url_documentation && (
          <Button
            link={data.source.url_documentation}
            target="_blank"
            text="Documentation"
            iconName="fa:book"
            type="secondary"
            outline={true}
            size="medium"
            fullWidth={true}
          />
        )
      }
    </div>
  </footer>
</article>

<style>
  .project-detail-card {
    background: var(--white);
    border-radius: 1.5rem;
    box-shadow: 0 4px 24px rgba(0, 0, 0, 0.08);
    padding: 2.5rem;
    display: flex;
    flex-direction: column;
    gap: 2rem;
    position: relative;
    overflow: hidden;
  }

  .project-detail-card__header {
    position: relative;
    padding-bottom: 0.5rem;
    display: flex;
    flex-direction: column;
    gap: 1.3rem;
  }

  .project-detail-card__name {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .project-detail-card__title {
    font-size: 2.2rem;
    font-weight: 700;
    color: var(--primary-dark);
    margin: 0;
    line-height: 1.2;
  }

  .project-detail-card__meta-group {
    background-color: rgba(0, 0, 0, 0.02);
    border-radius: 1rem;
    padding: 1.2rem;
  }

  .project-detail-card__meta {
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
    gap: 1.8rem;
  }

  .meta-item {
    display: flow;
    align-items: center;
    gap: 0.7rem;
  }

  .meta-icon {
    color: var(--primary);
    font-size: 1.2rem;
    width: 1.2rem;
    height: 1.2rem;
  }

  .meta-label {
    display: block;
    font-size: 0.8rem;
    color: var(--gray-dark);
    margin-bottom: 0.2rem;
  }

  .meta-value {
    font-weight: 500;
    color: var(--black);
    font-size: 0.95rem;
  }

  .project-detail-card__body {
    display: flex;
    flex-direction: column;
    gap: 2rem;
  }

  .project-detail-card__description {
    color: var(--gray-dark);
  }

  .description-title,
  .tags-title {
    color: var(--primary);
  }

  .tags-container {
    display: flex;
    flex-wrap: wrap;
    gap: 0.6rem;
  }

  .project-detail-card__footer {
    padding-top: 0.5rem;
  }

  .project-detail-card__actions {
    display: flex;
    gap: 1rem;
  }

  @media (max-width: 768px) {
    .project-detail-card {
      padding: 1.5rem;
      border-radius: 1rem;
      gap: 1.5rem;
    }

    .project-detail-card__title {
      font-size: 1.8rem;
    }

    .project-detail-card__meta {
      gap: 1rem;
    }

    .meta-item {
      flex-basis: 100%;
    }

    .project-detail-card__actions {
      flex-direction: column;
    }
  }

  @media (max-width: 480px) {
    .project-detail-card {
      padding: 1rem;
      border-radius: 0.8rem;
      gap: 1rem;
    }

    .project-detail-card__title {
      font-size: 1.5rem;
    }

    .project-detail-card__header {
      padding-bottom: 1rem;
      gap: 1rem;
    }

    .project-detail-card__meta-group {
      padding: 0.8rem;
    }

    .project-detail-card__description {
      font-size: 1rem;
    }
  }
</style>
