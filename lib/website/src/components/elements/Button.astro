---
import { Icon } from "astro-icon/components";

/**
 * Stile visuale del pulsante
 */
type ButtonType = "primary" | "secondary" | "white";

/**
 * Dimensione del pulsante
 */
type ButtonSize = "small" | "medium" | "large";

export interface Props {
  /**
   * Testo da visualizzare nel pulsante
   */
  text: string;

  /**
   * ID HTML opzionale
   */
  id?: string;

  /**
   * URL di destinazione, se il pulsante Ã¨ un link
   */
  link?: string;

  /**
   * Tipo di stile visuale
   * @default "primary"
   */
  type?: ButtonType;

  /**
   * Se true, applica lo stile outline al pulsante
   * @default false
   */
  outline?: boolean;

  /**
   * Classi CSS aggiuntive
   */
  extraClass?: string;

  /**
   * Nome dell'icona da visualizzare (astro-icon)
   */
  iconName?: string;

  /**
   * Dimensione del pulsante
   * @default "medium"
   */
  size?: ButtonSize;

  /**
   * Se true, il pulsante occupa tutta la larghezza disponibile
   * @default false
   */
  fullWidth?: boolean;

  /**
   * Target HTML per i link (es. "_blank")
   */
  target?: string;

  /**
   * Se true, disabilita il pulsante
   * @default false
   */
  disabled?: boolean;

  disableEffects?: boolean;
}

const {
  text,
  id = null,
  link = null,
  type = "primary",
  outline = false,
  extraClass = null,
  iconName = null,
  size = "medium",
  fullWidth = false,
  target = null,
  disabled = false,
  disableEffects = false,
} = Astro.props;

// Combine classes
const buttonClasses = [
  `button-${type}`,
  outline ? `button-outline button-${type}-outline` : "",
  `button-${size}`,
  fullWidth ? "button-full-width" : "",
  extraClass ? extraClass : "",
  disabled ? "button-disabled" : "",
  disableEffects ? "no-effects" : "",
]
  .filter(Boolean)
  .join(" ");

// Determine if we need to wrap in an anchor tag
const isLink = link && !disabled;
---

{
  isLink ? (
    <a
      href={link}
      target={target}
      class={`button-link-wrapper ${fullWidth ? "button-full-width" : ""}`}
      aria-disabled={disabled}
    >
      <button id={id} class={buttonClasses} disabled={disabled} type="button">
        <span class="button-text">{text}</span>
        {iconName && (
          <Icon
            name={iconName}
            style="margin-left: 8px; vertical-align: 0.20em;"
            class="button-icon"
          />
        )}
      </button>
    </a>
  ) : (
    <button id={id} class={buttonClasses} disabled={disabled} type="button">
      <span class="button-text">{text}</span>
      {iconName && <Icon name={iconName} class="button-icon" />}
    </button>
  )
}

<style>
  .button-link-wrapper {
    display: inline-block;
    text-decoration: none;
  }

  .button-link-wrapper[aria-disabled="true"] {
    pointer-events: none;
    cursor: not-allowed;
    opacity: 0.65;
  }

  button {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    font-family: inherit;
    font-weight: 600;
    text-decoration: none;
    border-radius: 50px;
    border: none;
    box-shadow: var(--box-shadow);
    transition: all 0.3s ease;
    cursor: pointer;
    white-space: nowrap;
    position: relative;
    overflow: hidden;
  }

  .no-effects {
    opacity: 100% !important;
    animation: none !important;
    transition: none !important;
    transform: none !important;
  }

  .no-effects button:hover:not(:disabled),
  .no-effects button:active:not(:disabled) {
    transform: none !important;
  }

  /* Button animations */
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(15px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  button {
    opacity: 0;
    transform: translateY(8px);
    animation: fadeInUp 0.8s ease-out 0.5s forwards;
  }

  /* Button sizes */
  .button-small {
    font-size: 0.875rem;
    padding: 0.5rem 1.25rem;
  }

  .button-medium {
    font-size: 1rem;
    padding: 0.75rem 2rem;
  }

  .button-large {
    font-size: 1.25rem;
    padding: 1rem 2.5rem;
  }

  /* Full width button */
  .button-full-width {
    width: 100%;
  }

  /* Button types */
  .button-primary {
    background: var(--primary);
    color: var(--white);
  }

  .button-primary:hover:not(:disabled) {
    background: var(--primary-dark);
    transform: translateY(-3px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
  }

  .button-secondary {
    background: var(--secondary);
    color: var(--white);
  }

  .button-secondary:hover:not(:disabled) {
    background: var(--secondary-dark);
    transform: translateY(-3px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
  }

  .button-white {
    background: var(--white);
    color: var(--primary);
  }

  .button-white:hover:not(:disabled) {
    background: var(--gray);
    color: var(--primary);
    transform: translateY(-3px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
  }

  /* Outline buttons */
  .button-outline {
    background: transparent;
    border: 2px solid;
    box-shadow: none;
  }

  .button-primary-outline {
    color: var(--primary);
    border-color: var(--primary);
  }

  .button-primary-outline:hover:not(:disabled) {
    background: var(--primary-dark);
    border-color: var(--primary-dark);
    color: var(--white);
    transform: translateY(-3px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
  }

  .button-secondary-outline {
    color: var(--secondary);
    border-color: var(--secondary);
  }

  .button-secondary-outline:hover:not(:disabled) {
    background: var(--secondary-dark);
    border-color: var(--secondary-dark);
    color: var(--white);
    transform: translateY(-3px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
  }

  .button-white-outline {
    color: var(--white);
    border-color: var(--white);
  }

  .button-white-outline:hover:not(:disabled) {
    background: var(--white);
    border-color: var(--white);
    color: var(--primary);
    transform: translateY(-3px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
  }

  /* Disabled state */
  .button-disabled,
  button:disabled {
    opacity: 0.65;
    cursor: not-allowed;
    pointer-events: none;
    transform: none !important;
    box-shadow: none !important;
  }

  /* Button text and icon */
  .button-text {
    display: inline-block;
  }

  .button-icon {
    display: inline-block;
    margin-left: 0.5rem;
    vertical-align: -0.15em;
    width: 1em;
    height: 1em;
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .button-small {
      font-size: 0.75rem;
      padding: 0.4rem 1rem;
    }

    .button-medium {
      font-size: 0.875rem;
      padding: 0.6rem 1.5rem;
    }

    .button-large {
      font-size: 1rem;
      padding: 0.75rem 2rem;
    }
  }

  /* Hover effects and feedback */
  button:active:not(:disabled) {
    transform: translateY(-1px);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
  }

  @media (prefers-reduced-motion: reduce) {
    button {
      animation: none;
      opacity: 1;
      transform: translateY(0);
      transition: none;
    }

    button:hover:not(:disabled),
    button:active:not(:disabled) {
      transform: none;
    }
  }
</style>
