---
import BaseLayout from "@layouts/BaseLayout.astro";
import type { Posts } from "src/pages/blog/interfaces";
import { SectionHeaderStandard } from "src/@walle/components";

interface Props extends Posts {
  author?: string;
  publishDate?: Date;
  readingTime?: string;
  tags?: string[];
}

const { title, description, author, publishDate, readingTime, tags } = Astro.props;

const formattedDate = publishDate
  ? new Intl.DateTimeFormat("it-IT", {
      year: "numeric",
      month: "long",
      day: "numeric",
    }).format(publishDate)
  : null;
---

<BaseLayout headerTitle={title} headerDescription={description}>
  <SectionHeaderStandard title={title} subtitle={description} />
  <div class="blog-layout">
    <article class="article-container">
      <header class="article-header">
        <div class="header-content">
          {
            (author || publishDate || readingTime) && (
              <div class="article-meta">
                {author && (
                  <div class="meta-item author">
                    <svg class="meta-icon" viewBox="0 0 20 20" fill="currentColor">
                      <path
                        fill-rule="evenodd"
                        d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z"
                        clip-rule="evenodd"
                      />
                    </svg>
                    <span>di {author}</span>
                  </div>
                )}
                {publishDate && (
                  <div class="meta-item date">
                    <svg class="meta-icon" viewBox="0 0 20 20" fill="currentColor">
                      <path
                        fill-rule="evenodd"
                        d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z"
                        clip-rule="evenodd"
                      />
                    </svg>
                    <time datetime={publishDate.toISOString()}>{formattedDate}</time>
                  </div>
                )}
                {readingTime && (
                  <div class="meta-item reading-time">
                    <svg class="meta-icon" viewBox="0 0 20 20" fill="currentColor">
                      <path
                        fill-rule="evenodd"
                        d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z"
                        clip-rule="evenodd"
                      />
                    </svg>
                    <span>{readingTime} di lettura</span>
                  </div>
                )}
              </div>
            )
          }

          {
            tags && tags.length > 0 && (
              <div class="article-tags">
                <span class="tags-label">Tag:</span>
                <div class="tags-list">
                  {tags.map((tag) => (
                    <span class="tag">{tag}</span>
                  ))}
                </div>
              </div>
            )
          }
        </div>
      </header>

      <div class="article-content prose">
        <slot />
      </div>
    </article>

    <!-- Progress indicator -->
    <div class="reading-progress">
      <div class="progress-bar" id="progress-bar"></div>
    </div>
  </div>
</BaseLayout>

<style>
  .blog-layout {
    position: relative;
    min-height: 100vh;
  }

  .article-container {
    max-width: 70ch; /* Optimal reading width */
    margin: 0 auto;
    padding: 1rem 1.5rem;
    position: relative;
  }

  .article-header {
    margin-bottom: 2.5rem;
    position: relative;
  }

  .header-content {
    padding-bottom: 2.5rem;
    border-bottom: 1px solid var(--primary-light);
  }

  /* Meta information styling */
  .article-meta {
    display: flex;
    flex-wrap: wrap;
    gap: 1.5rem;
    margin-top: 2rem;
    padding: 1rem 0;
  }

  .meta-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.875rem;
    color: #6b7280;
    font-weight: 500;
  }

  .meta-icon {
    width: 1rem;
    height: 1rem;
    flex-shrink: 0;
    opacity: 0.7;
  }

  /* Tags styling */
  .article-tags {
    margin-top: 1.5rem;
    display: flex;
    flex-wrap:;
    align-items: center;
    gap: 0.75rem;
  }

  .tags-label {
    font-size: 0.875rem;
    font-weight: 600;
    color: #374151;
  }

  .tags-list {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .tag {
    background: linear-gradient(135deg, var(--primary-light), var(--primary));
    color: var(--white);
    padding: 0.375rem 0.875rem;
    border-radius: 2rem;
    font-size: 0.75rem;
    font-weight: 600;
    letter-spacing: 0.025em;
    transition: all var(--transition);
    cursor: pointer;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .tag:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
  }

  /* Reading progress bar */
  .reading-progress {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 3px;
    background: rgba(0, 0, 0, 0.1);
    z-index: 100;
  }

  .progress-bar {
    height: 100%;
    background: linear-gradient(90deg, var(--primary), var(--primary-light));
    width: 0%;
    transition: width 0.1s ease;
  }

  /* Enhanced prose styling */
  .prose {
    line-height: 1.75;
    color: #374151;
    font-size: 1.125rem;
    max-width: none;
  }

  /* Typography improvements */
  .prose :global(h1) {
    font-size: 2.5rem;
    font-weight: 800;
    margin: 3rem 0 1.5rem 0;
    color: var(--black);
    line-height: 1.1;
    letter-spacing: -0.025em;
    position: relative;
  }

  .prose :global(h1::after) {
    content: "";
    position: absolute;
    bottom: -0.5rem;
    left: 0;
    width: 3rem;
    height: 3px;
    background: linear-gradient(90deg, var(--primary), var(--primary-light));
    border-radius: 2px;
  }

  .prose :global(h2) {
    font-size: 2rem;
    font-weight: 700;
    margin: 2.5rem 0 1rem 0;
    color: var(--black);
    line-height: 1.2;
    letter-spacing: -0.025em;
    position: relative;
    padding-left: 1rem;
  }

  .prose :global(h2::before) {
    content: "";
    position: absolute;
    left: 0;
    width: 4px;
    height: 100%;
    background: var(--secondary);
    border-radius: 2px;
  }

  .prose :global(h3) {
    font-size: 1.5rem;
    font-weight: 600;
    margin: 2rem 0 1rem 0;
    color: var(--black);
    line-height: 1.3;
  }

  .prose :global(h4) {
    font-size: 1.25rem;
    font-weight: 600;
    margin: 1.5rem 0 0.75rem 0;
    color: var(--black);
  }

  .prose :global(p) {
    margin: 1.5rem 0;
    text-align: justify;
    hyphens: auto;
  }

  .prose :global(p:first-of-type) {
    font-size: 1.25rem;
    font-weight: 400;
    color: var(--primary-dark);
    margin-bottom: 2rem;
  }

  /* Enhanced links */
  .prose :global(a) {
    color: var(--primary);
    text-decoration: none;
    font-weight: 500;
    border-bottom: 1px solid transparent;
    transition: all var(--transition);
    position: relative;
  }

  .prose :global(a:hover) {
    color: var(--primary-dark);
    border-bottom-color: var(--primary);
  }

  /* Lists improvements */
  .prose :global(ul),
  .prose :global(ol) {
    margin: 1.5rem 0;
    padding-left: 0;
  }

  .prose :global(li) {
    margin: 0.75rem 0;
    padding-left: 1.5rem;
    position: relative;
  }

  .prose :global(ul li::marker) {
    content: "â€¢";
    color: var(--primary);
    left: 0;
    top: 0;
  }

  /* Enhanced blockquotes */
  .prose :global(blockquote) {
    border-left: 4px solid var(--secondary);
    padding: 1.5rem 1.5rem 1.5rem 2rem;
    margin: 2rem 0;
    font-style: italic;
    color: var(--secondary);
    background: linear-gradient(135deg, #f8f9fa, #ffffff);
    border-radius: 0 0.5rem 0.5rem 0;
    position: relative;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
  }

  .prose :global(blockquote::before) {
    content: '"';
    font-size: 4rem;
    position: absolute;
    top: -0.5rem;
    left: 0.5rem;
    opacity: 0.3;
  }

  /* Code improvements */
  .prose :global(code) {
    background: #f1f5f9;
    padding: 0.25rem 0.5rem;
    border-radius: 0.375rem;
    font-size: 0.875rem;
    color: var(--primary-dark);
  }

  .prose :global(pre) {
    background: #1e293b;
    color: #f1f5f9;
    padding: 1.5rem;
    border-radius: 0.75rem;
    overflow-x: auto;
    margin: 2rem 0;
    font-size: 0.875rem;
    line-height: 1.6;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    position: relative;
  }

  .prose :global(pre code) {
    background: transparent;
    padding: 0;
    color: inherit;
    border: none;
  }

  /* Image enhancements */
  .prose :global(img) {
    max-width: 100%;
    height: auto;
    border-radius: 0.75rem;
    margin: 2rem auto;
    display: block;
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.12);
    transition: transform var(--transition);
  }

  .prose :global(img:hover) {
    transform: scale(1.02);
  }

  /* Table styling */
  .prose :global(table) {
    width: 100%;
    border-collapse: collapse;
    margin: 2rem 0;
    border-radius: 0.5rem;
    overflow: hidden;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }

  .prose :global(th),
  .prose :global(td) {
    border: none;
    padding: 1rem;
    text-align: left;
  }

  .prose :global(th) {
    background: var(--primary);
    color: white;
    font-weight: 600;
    font-size: 0.875rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .prose :global(tr:nth-child(even)) {
    background: #f8f9fa;
  }

  .prose :global(hr) {
    border: none;
    height: 1px;
    background: var(--primary);
    margin: 2rem 0;
  }

  /* Responsive design */
  @media (max-width: 768px) {
    .article-container {
      padding: 1rem;
      max-width: 100%;
    }

    .article-header {
      margin-bottom: 2rem;
    }

    .article-meta {
      flex-direction: column;
      gap: 1rem;
    }

    .article-tags {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.75rem;
    }

    .prose {
      font-size: 1rem;
    }

    .prose :global(h1) {
      font-size: 2rem;
      margin: 2rem 0 1rem 0;
    }

    .prose :global(h2) {
      font-size: 1.5rem;
      margin: 2rem 0 1rem 0;
    }

    .prose :global(h3) {
      font-size: 1.25rem;
    }

    .prose :global(p:first-of-type) {
      font-size: 1.125rem;
    }

    .prose :global(blockquote) {
      padding: 1rem;
      margin: 1.5rem 0;
    }

    .prose :global(pre) {
      padding: 1rem;
      margin: 1.5rem 0;
      border-radius: 0.5rem;
    }

    .prose :global(table) {
      font-size: 0.875rem;
    }

    .prose :global(th),
    .prose :global(td) {
      padding: 0.75rem 0.5rem;
    }
  }

  /* Print styles */
  @media print {
    .reading-progress {
      display: none;
    }

    .article-container {
      max-width: none;
      padding: 0;
    }

    .prose {
      font-size: 12pt;
      line-height: 1.4;
    }
  }
</style>

<script>
  // Reading progress indicator
  function updateProgress() {
    const article = document.querySelector(".article-content");
    const progressBar = document.getElementById("progress-bar");

    if (!article || !progressBar) return;

    const articleHeight = article.offsetHeight;
    const articleTop = article.offsetTop;
    const windowHeight = window.innerHeight;
    const scrolled = window.scrollY;

    const progress = Math.min(
      Math.max((scrolled - articleTop + windowHeight * 0.25) / articleHeight, 0),
      1
    );

    progressBar.style.width = `${progress * 100}%`;
  }

  // Smooth scroll for anchor links
  function initSmoothScroll() {
    document.querySelectorAll('a[href^="#"]').forEach((anchor) => {
      anchor.addEventListener("click", function (e) {
        e.preventDefault();
        const target = document.querySelector(this.getAttribute("href"));
        if (target) {
          target.scrollIntoView({
            behavior: "smooth",
            block: "start",
          });
        }
      });
    });
  }

  // Initialize when DOM is loaded
  document.addEventListener("DOMContentLoaded", () => {
    updateProgress();
    initSmoothScroll();

    window.addEventListener("scroll", updateProgress);
    window.addEventListener("resize", updateProgress);
  });
</script>
